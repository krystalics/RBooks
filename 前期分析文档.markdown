#### 2019.3.5----2019.3.15

## 项目需求分析

**系统名称：**一起读书吧

**数据录入：**通过用户注册收集用户数据，书本的数据在pc端增加

- 系统功能模块

<img src="./img/%E7%B3%BB%E7%BB%9F%E5%8A%9F%E8%83%BD%E5%9B%BE.png">

- **用户与权限管理：**

**用户角色：**一般用户，管理用户

**权限级别：**管理用户比一般用户多了几个功能：删除，修改，查阅用户信息

**数据可视性：**普通用户只能看见自己的信息，而管理用户可以看见所有用户信息。

<img src="./img/%E4%B8%9A%E5%8A%A1%E6%B5%81%E7%A8%8B%E5%9B%BE.png">

- **用例设计图**

<img src="./img/%E7%94%A8%E4%BE%8B%E5%9B%BE.png">



- **后台模块设计**

<img src="./img/%E9%A1%B9%E7%9B%AE%E7%BB%93%E6%9E%84%E5%9B%BE.png">

**以service为中心，通过调用dao读取和储存数据，反应到controller中，最后与前端完成交互**

更加抽象的层面如下图：

> ***2019.4.4*** 这个项目的前端结构混乱，以组件模块的方式组装在一起，很难给出一个层次概念。原谅我不怎么会js，真的这些代码看上去就像shit一样。之后再补一个前端的组件树吧：	

##### 4.5 补充组件树如下：

<img src="./img/34.png">

<img src="./img/%E5%90%8E%E5%8F%B0%E9%A1%B9%E7%9B%AE%E7%BB%93%E6%9E%84%E5%9B%BE.png">

划分完层次结构之后的步骤：

1. 把DAO的接口设计出来，这一步基本就是将Entity中的表crud操作包装一下。
2. 然后把Service的接口设计并实现，调用DAO的Bean
3. 最后写出Controller，调用Service的Bean
4. 前端访问Controller

有时候还需要不断的和前端的设计页面对接，写出接口文档(在编写中不断的更改)，然后通过Controller需要的服务再次对之前的模块进行修正，毕竟不可能一开始就写出不需要修改的代码。只能说结构好点的代码修改的地方比较少。





