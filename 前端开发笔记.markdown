*项目刚刚启动，先到官网把前端的环境搭了下，花了大概1天才跑起来helloworld。*

##### 2019.03.04    23:04

	在中午刚配置好一个react-native的初始项目，到了晚上再进行调试就发现了如下错误

<img src="./img/1.png">

	期初查了文章说是端口被占用，将占用端口的停了就好，后面发现是adb版本不一致的问题。虽然很奇怪，但是不知道为什么，也不知道从什么时候开始我在环境中的adb和sdk中的adb版本变得不一样了。在一篇文章上看到的

<img src="./img/2.png">

	虽然上述的是Linux系统，但是我的情况和它一致，也是两个地方的adb版本不一致。Linux的环境是处于 **/usr/local/bin**中的 ，而Windows我苦思冥想找不到环境path在哪里，于是在windows的文档系统里搜索adb，看见在C:/windows下的adb我恍然大悟。windows下的path正是处于该路径下。
	
	接下来就是把sdk中的adb.exe复制到C:/windows路径下了。

**整个过程耗时3个小时。  debug  不愧是程序员的痛点啊。**

---

##### 2019.3.22 

在上课的时候，看着love2.io网站把组件模块划分了一下：[Axure原型地址](https://fh7ren.axshare.com) 

前端知识拓展：路由，一个只听过的概念。

普遍上的理解是当我们在浏览器中输入一个地址，到达服务端对应端口之后将该请求分发到对应接口的过程叫做路由分发，对应SpringBoot中就是对应路径的Controller来处理。

又分为前端路由和后端路由：前端路由是在页面内的 js 代码加载并执行完成之后才能正常工作的，当它开始工作的时候，URL 的变化就不再是传统意义上的刷新，而是跟踪 history 的变化。

那么什么时候加载成功了呢？一般来说就是通过 index.html 来加载的（这就是 spa 的最基本形态）。有时只有前端路由，当直接改变浏览器地址的url时，服务器就会报404错误——因为这样会请求后端接口服务，但是后端没有路由，所以不能解析该请求。

这时可以做前后端路由的同构，即前后端使用同一套路由。或者让后端统一返回index.html，让前端去匹配不同的URL。

React Router 是一个基于 [React](http://facebook.github.io/react/) 之上的强大路由库，它可以让你向应用中快速地添加视图和数据流，同时保持页面与 URL 间的同步。



---

##### 2019.3.23

进入正式的开发阶段，才发现CSS布局和标签大小真的很难搞，花了一个小时弄了个很丑很丑的界面。感觉要崩溃了，所以还是先 学习一下 rem和flex以及grid再开始项目实践吧。

<img src="./img/10.png">

[关于rem的文章](https://www.jianshu.com/p/1af305583b58)  

rem（font size of the root element）是指相对于根元素(即HTML元素)的字体大小的单位。假设根元素的字体大小是10px，5rem=5*10=50px  。`<html>`的默认字体大小是 **16px**，所以1rem是16px

```css
html{
    font-size:10px;
}
p{
    width:2rem; 20px
    margin:1rem;  10px
}
```



##### 如何使用rem来做不同尺寸的屏幕适配

很明显，我们会根据不同的设备宽度来调整 根元素的字体大小 ,内容尺寸。这样就会达到响应式的效果。理想的适配是把设计稿直接等比缩放在设备上，这样在任何不同的屏幕上布局都会很完美，手淘就是用的 **rem** 来进行适配的。

可是我悲催的发现，我并没有画设计稿，或者说我根本就不会画！难受啊，所以我就要一步步的慢慢测试，直到满意为止。

采用手淘的rem方案，将屏幕等分为20份，每份就是1rem，对应rem基准值，下面的js代码将该基准值赋给 html 的font-size:

```js
(function () {
    var html = document.documentElement;

    function onWindowResize() {
        html.style.fontSize = html.getBoundingClientRect().width / 20 + 'px'; //这边是 网页可见宽度 
    }

    window.addEventListener('resize', onWindowResize);
    onWindowResize();
})();
```

想办法获得自己pc的可见宽度：我的是 1396px  也就是说在我这里`1rem=1396/20=69.8 px` 。

1. 布局：第二天早上又花了2个小时，才知道 React的组件是不接受 `className` 这个属性的。我说怎么布局就这么难。利用Grid和flex共同布局形成的界面。*响应式的布局在后面的版本有时间再搞吧。*

<img src="./img/11.png">

2. React-router  学习ing：看了好久的文档，搞定了几个bug，正确的使用了路由

3. 接下来就是要从服务端获取数据：`fetch` 是浏览器内置对象，所以我们不用安装包，直接使用，不过很多都是需要post请求的，需要userid或者其他信息才能够发出请求。所以具体流程是这样的：  *今天就暂时停在 测试接口的进度吧 （2019.3.24）*
   1. 先写register和login的页面，让用户处于登录状态，保存userid
   2. 写个状态验证的高阶组件，用于对用户是否登录进行判定，从而确定其是否能够访问某个页面
   3. 有了post必须的参数之后就能够对其他页面进行访问了。

<img src="./img/12.png">

4. 渲染数据

---



##### 3.27 工作日志

经过几个小时的查阅文档决定使用`Axios`ajax库，验证是否登录的直接检查cookie是不是还在，设置cookie时间为7天。下午碰到了一个bug，感觉很麻烦。

<img src="./img/13.png">

请求变成了：`message?username=krysta&&password=rbooks` 和登录的请求不一样。

情况是这样的：由于`<form></form> `我并没有指定`method` 所以默认就是get方法，导致请求变成了上面这个样子。浏览器访问的是前端的服务，所以路径上显示的都是前端的路由，它会从后端获取数据然后渲染，而这里是因为 `form`的属性覆盖了 `axops.post()`方法，才导致请求出错。

像下面也是这样。

<img src="./img/14.png">



只要把参数填明确了，就不会发生请求错误，

`<form onSubmit={this.handleLogin} method="post" action="http://localhost:8080/user/login">` 虽然页面上还是显示 端口为3000 ，前端的服务提供给浏览器，它再向后端获取数据。

##### 3.28 今天本打算早起修bug，但是我还是低估了自己。

最新的bug是这样的：`Cannot post /user/login`  后端的代码如下：

```java
@RestController
@RequestMapping("/user")
public class UserController {

  private final UserService userServiceImpl;

  @Autowired
  public UserController(UserServiceImpl userServiceImpl) {
    this.userServiceImpl = userServiceImpl;
  }

  @RequestMapping(value = "/login", method = RequestMethod.POST, produces = MediaType.APPLICATION_JSON_VALUE)
  public int login(@RequestBody User user) {
    System.out.println(user.getName()+user.getPassword());
    return userServiceImpl.login(user); //失败返回一个 -1  成功则是该用户的 id
  }
}
```

我找了好多文章才发现可能的错误。

1. `form`的 `content-type=application/x-www-form-urlencoded` 而我后端定义的是 `application/json` 所以会报错  `content-type=application/x-www-form-urlencoded not supported ` 
2. 我后端获取参数的方法是用`@RequestBody`，但是查了下文章发现获取参数的方法还是有区别的。

**@RequestParam**

A） 常用来处理简单类型的绑定，通过Request.getParameter() 获取的String可直接转换为简单类型的情况（ String--> 简单类型的转换操作由ConversionService配置的转换器来完成）；因为使用request.getParameter()方式获取参数，所以可以处理get 方式中queryString的值，也可以处理post方式中 body data的值；

B）**用来处理Content-Type: 为 `application/x-www-form-urlencoded`编码的内容，提交方式GET、POST；**

C) 该注解有两个属性： value、required； value用来指定要传入值的id名称，required用来指示参数是否必须绑定；

**@RequestBody**

该注解常用来处理Content-Type: 不是`application/x-www-form-urlencoded`编码的内容，例如**application/json**, application/xml等；

这也就是我在用postman测试的时候会通过的原因了。

##### 然后接着下一个bug又出现了！天哪，杀了我吧

> There was an unexpected error (type=Not Acceptable, status=406).
>
> Could not find acceptable representation

然后又在各种文章中饱受摧残，终于在这篇文章中看到这样的 Controller ：[Baeldung](https://www.baeldung.com/spring-httpmediatypenotacceptable)  ，和查阅了[consumes和produces的意义](https://blog.csdn.net/u011136197/article/details/78923000) 才明白是我**接收方式出了问题，以及返回方式也和前端的 Accept 不一致：**前端接收的如下图：

<img src="./img/17.png">

所以最终 后端的controller 是这样的：

`@RequestMapping(value = "/login", method = RequestMethod.POST, consumes = MediaType.APPLICATION_FORM_URLENCODED_VALUE)` 把 produces 去掉了换成consumes。



最后还是被这个bug折磨的身不如死，把 `<form>`给去掉了，只保留中间的input，后台的接收方式也还原为了 'application/json' ，完成了这个功能。总的来说一开始就是个小bug，但是被我跑偏了之后就一直在修补，最后回过头来才发现，只需要撤掉身上的枷锁就可以翱翔于天际。 

好的，接下来就是要渲染这些数据了。

---



##### 3.29  终于到了渲染数据的阶段

这些数据搞了我好久还没搞定，因为react不能直接渲染数组或者对象（而我们从后端获取的数据很多时候是JSON对象），如果直接渲染报错如下。

<img src="./img/18.png">

所以我们必须确保整个调用链（getData->ComponentList->Concretecomponent） 都不会出现直接渲染对象的情况，都必须对其进行解析。**从对象数组到对象再到具体属性**， **从后台获取数据到UI整个过程代码如下**

```js
// 获取数据
export default (WrappedComponent, url) => {
  class NewComponent extends Component {
    constructor() {
      super();
      this.state = {data: ''}
    }

    componentWillMount() {
      axios.get('http://localhost:8080/' + url)
      .then(res => {
        this.setState({data: res.data});
      }).catch(res => {
        this.setState({data: "加载错误"})
      })
    }

    render() {
      return (
         <WrappedComponent data={this.state.data}/>
      );
    }
  }

  return NewComponent
}



```

之后将json对象数组进行分组  ， 记住由于传进react组件中的属性的类型对于react来说是透明的(不可知) ，所以直接调用`this.props.data.map()` 会报错，`this.props.data.map() is not a function` , 需要有个类型明确的数组，如下：

```js
// 对 数组划分
class BookList extends Component {

  data() {
    const data = this.props.data;
    let datas = [];
    for (let index in data) {
      let temp;
      temp = {
        id: data[index].id,
        name: data[index].name,
        author: data[index].author,
        description: data[index].description,
        datetime: data[index].datetime,
        photourl: data[index].photourl,
        love: data[index].love
      };

      datas.push(temp);
    }

    return datas;
  }

  render() {

    return (
        this.data().map((item, idx) => {
          return <BookInfo key={idx} data={item}/>
        })
    );
  }
}

BookList = wrapWithAjaxGetData(BookList, 'home');
export default BookList;
```

最后对每个单独的json对象进行解析，记住不能直接`{this.props.data}` 因为react不能直接解析对象。

```js
import React, {Component} from 'react';

class BookInfo extends Component {

  render() {
    return (
        <div>
          {this.props.data.id}
          {this.props.data.name}
          {this.props.data.author}
          {this.props.data.description}
          {this.props.data.datetime}
          {this.props.data.photourl}
          {this.props.data.love}
          <hr/>
        </div>
    );
  }
}

export default BookInfo;
```

所以我们最终得到 

<img src="./img/19.png">



---

碰到一个可优化问题，在Message中需要的CommentList是By  commentsuer 的，而在阅读文章的时候我们需要的是By chapterid。而CommentList已经被高阶组件写死了是访问的commentuser，代码如下：

```js
CommentList = wrapWithAjaxGetData(CommentList,`message?commentuser=${localStorage.getItem('name')}`);
```

而需要访问chapterid接口的，则需要另外写个大部分代码和它一样的组件很明显不合理。但是现在项目还没完全搞定，先将就着写，后期再来填坑。



---

注意如果要在同一个类中获取数据和解析数据，注意解析数据一定要在获取之后，不是说的代码顺序而是执行的逻辑顺序，因为js是单线程异步的，所以很多时候不能够保证渲染的数据是对的。一般推荐在，获取数据的函数中：

```js
axios.get('http://localhost:8080/read/getbook?bookid=' + this.state.bookid)
    .then(res => {
      this.setState({data: res.data});
      this.analyse_data(); //保证是在获取之后渲染
    }).catch(res => {
      this.setState({data: "加载错误"})
    })
```

---

又遇到一个bug，这个bug很让我不解：

```js
content = {
        bookid: data[index].chapterid.bookid,
        chaptername: data[index].chapterid.chaptername,
        author: author,
        datetime: data[index].datetime,
        content: data[index].content
      };

          {JSON.stringify(this.state.contents[0])}
          {this.state.contents[0].bookid}
          {this.state.contents[0].chaptername}
          {this.state.contents[0].author}
          {this.state.contents[0].datetime}
          {this.state.contents[0].content}
```

<img src="./img/21.png">

注释掉 下面的几行`{this.state.contents[0]...}`之后就渲染成功了。这两个有什么问题吗？？？？？明天去问学长。



---

##### 3.30 问过学长了，他对这个问题也没什么想法，但是还是感觉比我厉害

还是之前的问题，contents能够渲染，但是他的对象就不行。

```js
{JSON.stringify(this.state.contents)}
<ReactJSON data={this.state.contents}/>
```

<img src="./img/22.png">

然后将contents的东西，像之前的层次一样罗列就成功的渲染出来了。这tmd的是react的bug吗？？？？？

```js
<DirectoryList data={this.state.directory}/>
<ContentList data={this.state.contents}/>
```



---

好吧又遇到一个新的bug，从目录点击进去之后是没有问题，但是**刷新之后整个App组件刷新之后，read组件也刷新它需要从url中获得参数，而这和我定义的content参数不一致，导致了报错。**

<img src="./img/23.png">



**所以要将之前read的参数也传递到后面的路由中，**最终的结果是这样的：chapterid由read传递到directoryList再到directory ，

```js
//  directory组件
<NavLink to=
  {`/read/${this.props.chapterid}/content/${this.props.data.name}`}>{this.props.data.name}</NavLink>

// read组件中的render方法
<DirectoryList data={this.state.directory} chapterid={this.props.match.params.data}/>
          <div>
            <Route path="/read/:data/content/:chaptername" component={MainContent}/>
          </div>

```



这样，bug就解决了，很安逸，，吐槽一下：难怪一般大项目都是要状态管理库（React-redux / Mobx）之类的，这个状态单靠props 传递好难受啊。

还有复杂的参数传递要注意用state，用其他方法会显示在url中而且字长太长的话也装不下。



又又遇到bug了，这次是当我刚刚解决目录和内容匹配问题时，想要加载对应的评论却报错了。是之前遇到过的问题，

<img src="img/24.png">

初步预估：因为CommentList的请求和read冲突了？？ 明天再说



---

明天到了，今天早起去帮忙学院打杂(研究生复试)下午才回宿舍，感觉整个人都瘫痪了。想着赶紧解决完这个bug，就躺到床上休息。

背景：本来是想要根据章节内容加载评论列表的，这个评论列表放在read组件中是可以正常工作的

<img src="./img/25.png">

但是这不是根据章节来加载评论，所以我把他放到MainContent，就是内容那个组件中，结果就报了上述错误。这个错误搞得我都不知道怎么google了，所以改了结构先在read组件中把所有该书本的Comment都获取了，后面再加载渲染。在这期间还重构了代码把CommentList和BookList剥离出去，提高重用，修复了登录的bug。

在这期间还重构了代码把CommentList和BookList剥离出去，提高重用，修复了登录的bug。



虽然可以正确加载数据，但是渲染到Comment组件中就会报错，明天来解决这个问题：



---

##### 3.31 明天又到了，早上有个考试，各种杂乱的知识点，我想我是要凉了

包括手写一个Servlet程序（只听过，没见过）Hibernate的核心API，只在框架中用过，没见过原来的模样。

查了下昨天的bug，只是重构的时候一些属性名没改过来，两分钟就解决了。

终于可以开始最后的渲染了。写书的页面放在后面的版本中开发。



