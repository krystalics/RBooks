##### 由于完成项目过程中，接口时常更改，所以下面这些文档仅供参考，以实际项目中的接口为准---暂时没时间更新



---

#### 接口简介：查看个人信息

##### 请求地址

/mypage?userid=...

##### 请求类型

GET

##### 正确的返回示例：

```json
{
    "information": {
        "userid": 2,
        "email": "xx.com",
        "selfintroduction": "none",
        "photourl": "...",
        "githubpage": "..",
        "homepage": "fff",
        "username": "wanwenzhuo"
    },
    "bookList_write": [
        {
            "id": 6,
            "name": "第二本书",
            "author": "wanwenzhuo",
            "description": "这是用来测试的",
            "datetime": "2019-03-18T14:10:37.000+0000",
            "photourl": "...",
            "love": 3
        }
    ],
    "bookList_follow": [
        {
            "id": 1,
            "name": "从第一本书改为测试用书",
            "author": "krysta",
            "description": "还是测试",
            "datetime": "2019-03-19T00:00:00.000+0000",
            "photourl": "url",
            "love": 1111
        },
        {
            "id": 6,
            "name": "第二本书",
            "author": "wanwenzhuo",
            "description": "这是用来测试的",
            "datetime": "2019-03-18T14:10:37.000+0000",
            "photourl": "...",
            "love": 3
        }
    ],
    "userList_follow": [
        {
            "id": 3,
            "name": "xiahongwei",
            "password": "",
            "role": 0
        },
        {
            "id": 4,
            "name": "jiangchen",
            "password": "",
            "role": 0
        }
    ],
    "userList_be_followed": [
        {
            "id": 0,
            "name": "krysta",
            "password": "",
            "role": 2
        }
    ]
}
```



##### 错误的返回示例

```json
{
    "timestamp": "2019-03-19T13:29:27.703+0000",
    "status": 400,
    "error": "Bad Request",
    "message": "JSON parse error: Unexpected end-of-input: expected close marker for Object (start marker at [Source: (PushbackInputStream); line: 1, column: 2]); ...",
    "path": "/mypage"
}
```



##### 备注说明

 *`Content-Type= MediaType.TEXT_PLAIN_VALUE`*

由post改为了get，所以不用这个了

##### 修改日志

由post改为了get后面带参数的方法

---



#### 接口简介：主页信息

##### 请求地址

/home

##### 请求类型

GET

##### 正确的返回示例：

```json
[
    {
        "id": 1,
        "name": "从第一本书改为测试用书",
        "author": "krysta",
        "description": "还是测试",
        "datetime": "2019-03-19T00:00:00.000+0000",
        "photourl": "url",
        "love": 1111
    },
    {
        "id": 6,
        "name": "第二本书",
        "author": "wanwenzhuo",
        "description": "这是用来测试的",
        "datetime": "2019-03-18T14:10:37.000+0000",
        "photourl": "...",
        "love": 3
    },
    {
        "id": 7,
        "name": "第三本书",
        "author": "krysta",
        "description": "这还是用来测试的",
        "datetime": "2019-03-18T14:12:10.000+0000",
        "photourl": "没有照片",
        "love": 111
    }
]
```



##### 错误的返回示例

```json
{
    "timestamp": "2019-03-19T13:29:27.703+0000",
    "status": 400,
    "error": "Bad Request",
    "message":"没找到主页 自己编的",
    "path": "/mypage"
}
```



##### 备注说明

无

##### 修改日志

无

---



#### 接口简介：该用户的所有评论

##### 请求地址

/message?commentuser=...

##### 请求类型

GET

##### 正确的返回示例：

```json
[
    {
        "chapterid": {
            "bookid": 1,
            "chaptername": "第二章"
        },
        "datetime": "2019-03-19T01:07:33.000+0000",
        "commentuser": "jiangchen",
        "content": "这一章不错"
    },
    {
        "chapterid": {
            "bookid": 7,
            "chaptername": "第一章"
        },
        "datetime": "2019-03-19T00:00:00.000+0000",
        "commentuser": "jiangchen",
        "content": "这一章写的不错，"
    }
]
```



##### 错误的返回示例

```json
[]  //说明没有该用户或者没有评论
```



##### 备注说明

get方法不需要这个属性了 `Content-Type=MediaType.APPLICATION_JSON_VALUE`

##### 修改日志

有post改为 get，

---



#### 接口简介：增加一个书目

##### 请求地址

/write/addbook

##### 请求类型

POST

**请求参数格式**：

```json
{
	"name":"临虚",
	"author":"krysta",
	"description":"这是我很早就想写的小说了",
	"datetime":"2019-03-19",
	"photourl":"没有照片",
	"love":0
}
```

##### 正确的返回示例：

```json
12  //成功返回 该书的id  ，失败 就返回 -1
```



##### 错误的返回示例

```json
-1  
```



##### 备注说明

`Content-Type=MediaType.APPLICATION_JSON_VALUE`

##### 修改日志

无

---



#### 接口简介：删除一个书目

##### 请求地址

/write/deletebook

##### 请求类型

POST

**请求参数格式**：

```json
{
	"id":12
}
```

##### 正确的返回示例：

```json
删除成功
```



##### 错误的返回示例

```json
{
    "timestamp": "2019-03-19T13:54:58.534+0000",
    "status": 500,
    "error": "Internal Server Error",
    "message": "No class com.example.rbooks.backend.entity.Book entity with id 11 exists!",
    "path": "/write/deletebook"
}
```

##### 备注说明

`Content-Type=MediaType.TEXT_PLAIN_VALUE`

##### 修改日志

无

---



#### 接口简介：更新一个书目

##### 请求地址

/write/updatebook

##### 请求类型

POST

**请求参数格式**：

```json
{
	"id":1，
	"name":"临虚-2 书名也改了",
	"description":"这是我很早就想写的小说了，改变了介绍",
}
```

##### 正确的返回示例：

```json
更新成功
```



##### 错误的返回示例

```json
{
    "timestamp": "2019-03-19T13:54:58.534+0000",
    "status": 500,
    "error": "Internal Server Error",
    "path": "/write/deletebook"
}
```

##### 备注说明

`Content-Type=MediaType.APPLICATION_JSON_VALUE`

##### 修改日志

无

---



#### 接口简介：增加一个章节

##### 请求地址

/write/addchapter

##### 请求类型

POST

**请求参数格式**：

```json
{
    "chapterid":{
        "bookid":1,
        "chaptername":"虚幻职业"
    },
    "content":"这是增加章节的测试"
}
```

##### 正确的返回示例：

```json
保存成功
```



##### 错误的返回示例

```json
{
    "timestamp": "2019-03-19T13:54:58.534+0000",
    "status": 500,
    "error": "Internal Server Error",
    "path": "/write/deletebook"
}
```

##### 备注说明

`Content-Type=MediaType.APPLICATION_JSON_VALUE`

##### 修改日志

无

---



#### 接口简介：删除一个章节

##### 请求地址

/write/deletechapter

##### 请求类型

POST

**请求参数格式**：

```json
{
    "bookid":1,
    "chaptername":"虚幻职业"
}
```

##### 正确的返回示例：

```json
删除成功
```



##### 错误的返回示例

```json
{
    "timestamp": "2019-03-19T13:54:58.534+0000",
    "status": 500,
    "error": "Internal Server Error",
    "path": "/write/deletebook"
}
```

##### 备注说明

`Content-Type=MediaType.TEXT_PLAIN_VALUE`

##### 修改日志

无

---



#### 接口简介：更新一个章节

##### 请求地址

/write/updatechapter

##### 请求类型

POST

**请求参数格式**：

```json
{
    "chapterid":{
        "bookid":1,
        "chaptername":"虚幻职业"
    },
    "content":"这是增加章节的测试,还更新了内容"
}
```

##### 正确的返回示例：

```json
更新成功
```



##### 错误的返回示例

```json
{
    "timestamp": "2019-03-19T13:54:58.534+0000",
    "status": 500,
    "error": "Internal Server Error",
    "path": "/write/deletebook"
}
```

##### 备注说明

`Content-Type=MediaType.APPLICATION_JSON_VALUE`

##### 修改日志

无

---



#### 接口简介：增加一个评论

##### 请求地址

/read/addcomment

##### 请求类型

POST

**请求参数格式**：

```json
{
    "chapterid":{
        "bookid":1,
        "chaptername":"虚幻职业"
    },
    "datetime":"2018-03-23",
    "commentuser":"wanwenzhuo",
    "content":"这是增加评论,还更新了内容"
}
```

##### 正确的返回示例：

```json
添加成功
```



##### 错误的返回示例

```json
{
    "timestamp": "2019-03-19T13:54:58.534+0000",
    "status": 500,
    "error": "Internal Server Error",
    "path": "/write/deletebook"
}
```

##### 备注说明

`Content-Type=MediaType.APPLICATION_JSON_VALUE`

##### 修改日志

无

---



#### 接口简介：获得章节内容

##### 请求地址

/read/getcontent

##### 请求类型

POST

**请求参数格式**：

```json
{
    "bookid":1,
    "chaptername":"虚幻职业"
}
```

##### 正确的返回示例：

```json
这是增加章节的测试,还更新了内容  //之前增加的内容
```



##### 错误的返回示例

```json
{
    "timestamp": "2019-03-19T13:54:58.534+0000",
    "status": 500,
    "error": "Internal Server Error",
    "path": "/write/deletebook"
}
```

##### 备注说明

`Content-Type=MediaType.APPLICATION_JSON_VALUE`

##### 修改日志

无

---



#### 接口简介：获得章节的所有评论

##### 请求地址

/read/getcomments

##### 请求类型

POST

**请求参数格式**：

```json
{
    "bookid":1,
    "chaptername":"虚幻职业"
}
```

##### 正确的返回示例：

```json
[
    {
        "chapterid": {
            "bookid": 1,
            "chaptername": "虚幻职业"
        },
        "datetime": "2018-03-23T00:00:00.000+0000",
        "commentuser": "wanwenzhuo",
        "content": "这是增加评论,还更新了内容"
    }
]
```



##### 错误的返回示例

```json
{
    "timestamp": "2019-03-19T13:54:58.534+0000",
    "status": 500,
    "error": "Internal Server Error",
    "path": "/write/deletebook"
}
```

##### 备注说明

`Content-Type=MediaType.APPLICATION_JSON_VALUE`

##### 修改日志

无

---



#### 接口简介：关注一个作者

##### 请求地址

/read/addfollowauthor

##### 请求类型

POST

**请求参数格式**：

```json
{
    "userid":0,  //两个id都必须在 表中
    "authorid":2
}
```

##### 正确的返回示例：

```json
添加成功
```



##### 错误的返回示例

```json
{
    "timestamp": "2019-03-19T13:54:58.534+0000",
    "status": 500,
    "error": "Internal Server Error",
    "path": "/write/deletebook"
}
```

##### 备注说明

`Content-Type=MediaType.APPLICATION_JSON_VALUE`

##### 修改日志

无

---



#### 接口简介：取关一个作者

##### 请求地址

/read/deletefollowauthor

##### 请求类型

POST

**请求参数格式**：

```json
{
    "userid":0,  //两个id都必须在 表中
    "authorid":2
}
```

##### 正确的返回示例：

```json
删除成功
```



##### 错误的返回示例

```json
{
    "timestamp": "2019-03-19T13:54:58.534+0000",
    "status": 500,
    "error": "Internal Server Error",
    "path": "/write/deletebook"
}
```

##### 备注说明

`Content-Type=MediaType.APPLICATION_JSON_VALUE`

##### 修改日志

无

---

#### 接口简介：收藏一本书

##### 请求地址

/read/addfollowbook

##### 请求类型

POST

**请求参数格式**：

```json
{
    "userid":0,  //两个id都必须在 表中
    "bookid":1
}
```

##### 正确的返回示例：

```json
添加成功
```



##### 错误的返回示例

```json
{
    "timestamp": "2019-03-19T13:54:58.534+0000",
    "status": 500,
    "error": "Internal Server Error",
    "path": "/write/deletebook"
}
```

##### 备注说明

`Content-Type=MediaType.APPLICATION_JSON_VALUE`

##### 修改日志

无

---

#### 接口简介：不收藏某书

##### 请求地址

/read/deletefollowbook

##### 请求类型

POST

**请求参数格式**：

```json
{
    "userid":0,  //两个id都必须在 表中
    "bookid":1
}
```

##### 正确的返回示例：

```json
删除成功
```



##### 错误的返回示例

```json
{
    "timestamp": "2019-03-19T13:54:58.534+0000",
    "status": 500,
    "error": "Internal Server Error",
    "path": "/write/deletebook"
}
```

##### 备注说明

`Content-Type=MediaType.APPLICATION_JSON_VALUE`

##### 修改日志

无

---



#### 接口简介：设置个人信息

##### 请求地址

/settings

##### 请求类型

POST

**请求参数格式**：

```json
{
	"userid":2,
	"email":"这一次设置email"  //其他没有设置的，全都变为了 null
}
```

##### 正确的返回示例：

```json
设置成功
```



##### 错误的返回示例

```json
{
    "timestamp": "2019-03-19T13:54:58.534+0000",
    "status": 500,
    "error": "Internal Server Error",
    "path": "/write/deletebook"
}
```

##### 备注说明

`Content-Type=MediaType.APPLICATION_JSON_VALUE`

##### 修改日志

无



---



#### 接口简介：用户注册

##### 请求地址

/user/register

##### 请求类型

POST (在restful api中是 PUT)

##### 请求参数格式

```json
{
    "name":"linjiabao",
    "password":"213"
}
```



##### 正确的返回示例：

user的id

##### 错误的返回示例

-1 表示该账号已经存在

##### 备注说明

无

##### 修改日志

无



---

 

#### 接口简介：用户登录

##### 请求地址

/user/login

##### 请求类型

POST 

##### 请求参数格式

```json
{
    "name":"linjiabao",
    "password":"213"
}
```

**正确的返回示例**

user的id

##### 错误的返回示例

-1，表示该账号名不可用

##### 备注说明

登录成功之后，自动跳转到主页 地址为: /home

##### 修改日志

无

---



#### 接口简介：删除用户

##### 请求地址

/user/delete?userid=...

##### 请求类型

GET

**正确的返回示例**

```json
删除成功
```



##### 错误的返回示例

无

##### 备注说明

无

##### 修改日志

由原来的post改为get

---

#### 接口简介：更新用户

##### 请求地址

/user/update

##### 请求类型

POST 

##### 请求参数格式

```json
{
	"name":"wanwenzhuo",
	"password":"567"
}
```

**正确的返回示例**

```json
更新成功
```

##### 错误的返回示例

无

##### 备注说明

无

##### 修改日志

无