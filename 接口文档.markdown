#### 接口简介：用户注册

##### 请求地址

/user/register

##### 请求类型

POST (在restful api中是 PUT)

##### 请求参数

| 参数名   | 类型   | 必填 | 描述     | 默认值 | 参考值    |
| -------- | ------ | ---- | -------- | ------ | --------- |
| name     | string | 是   | 用户账号 | -      | zhanghao1 |
| password | string | 是   | 用户密码 | -      | 6位数以上 |

##### 正确的返回示例：

user的id

##### 错误的返回示例

-1 表示该账号已经存在

##### 备注说明

无

##### 修改日志

无



---

 

#### 接口简介：用户登录

##### 请求地址

/user/login

##### 请求类型

POST 

##### 请求参数

| 参数名   | 类型   | 必填 | 描述     | 默认值 | 参考值    |
| -------- | ------ | ---- | -------- | ------ | --------- |
| name     | string | 是   | 用户账号 | -      | zhanghao1 |
| password | string | 是   | 用户密码 | -      | 6位数以上 |

##### 正确的返回示例：

user的id

##### 错误的返回示例

-1，表示该账号名不可用

##### 备注说明

登录成功之后，自动跳转到主页 地址为: /home

##### 修改日志

无



---



#### 接口简介：主页

##### 请求地址

/home

##### 请求类型

GET

##### 正确的返回示例：

```json
[
    {
        "id": 1,
        "name": "第一本书",
        "author": "krysta",
        "description": "这也是用来测试的",
        "datetime": "2019-03-18T14:11:06.000+0000",
        "photourl": "没有照片",
        "like": 100
    },
    {
        "id": 6,
        "name": "第二本书",
        "author": "wanwenzhuo",
        "description": "这是用来测试的",
        "datetime": "2019-03-18T14:10:37.000+0000",
        "photourl": "...",
        "like": 3
    },
    ...
]
```



##### 错误的返回示例

```json
{
    null
}
```



##### 备注说明

无

##### 修改日志

无



---



#### 接口简介：消息，用户所有的评论

##### 请求地址

/messages

##### 请求类型

GET

##### 正确的返回示例：

```json
{
    "comment":[
        "charpterId":{
        	"bookId":1,
        	"chaptername":"第一章"
        },
		"content":"评论内容"
    ]
}
```



##### 错误的返回示例

```json
{
    "comment":{
        "连接不上服务器"
    }
}
```



##### 备注说明

无

##### 修改日志

无



---



#### 接口简介：我的个人信息

##### 请求地址

/mypage

##### 请求类型

GET

##### 正确的返回示例：

```json
{
    "Mypage":[
        "Information":{
        	"email":"xxx@xx.com",
       		"selfintroduction":"自我介绍",
        	"photourl":"...",
       		"githubpage":"...",
        	"homepage":"..."
    	},
        "books":{ //自己写的书，格式与下面相同
			
        },
        "followbook":[
            {
                "id":1,
                "bookname":"第一本书",
                "author":"作者1",
                "date":"2019-03-09",
                "photourl":"http://.....",
                "like":23
            },
            {
                ...
            },
            {
            	...    
            }
        ],
        "followauthor":[
            "author":"作者1",
            ...
         ]
		
    ]
}
```



##### 错误的返回示例

```json
{
    "Information":{
        "连接不上服务器"
    }
}
```



##### 备注说明

无

##### 修改日志

无

---



#### 接口简介：设置账户信息

##### 请求地址

/settings

##### 请求类型

POST

##### 请求参数

| 参数名           | 类型   | 必填 | 描述               | 默认值 | 参考值         |
| ---------------- | ------ | ---- | ------------------ | ------ | -------------- |
| email            | string | 是   | 用户的邮箱         | -      | 123@qq.com     |
| selfintroduction | string | 否   | 用户自我介绍       | -      | 我是一个好人   |
| photourl         | string | 否   | 用户上传的照片地址 | -      |                |
| githubpage       | string | 否   | github的主页       | -      | github.com/... |
| homepage         | string | 否   | 用户的网站主页     | -      | www.xxx.com    |



##### 正确的返回示例：

```json
"设置成功"
```



##### 错误的返回示例

```json
"失败，可能连接不上服务器"
```



##### 备注说明

用户上传的照片专门存储在一个图片文件夹上，升级版本可能就是存在MongoDB中。

这个接口相当于就是增删改查的一个综合api

##### 修改日志

无



---



#### 接口简介：具体书本内容

##### 请求地址

/book/chapter

##### 请求类型

GET

##### 正确的返回示例：

```json
[
    {
        "bookId":1,
        "chaptername":"第一章",
        "content":"章节内容"
    },
    ...
    
]
```



##### 错误的返回示例

```json
"失败，可能连接不上"
```



##### 备注说明

无

##### 修改日志

无



---

还有关于 book，chapter，comment，user，followauthor，followbook的增删改查等接口类似于下面的格式，

/book/add | delete |update| get  具体的数据格式和数据库中表的字段一致。

<img src="./img/数据库结构图.png">

除了user和book的id是自增的，即增加的时候不需要id，其他表的数据都是需要的。