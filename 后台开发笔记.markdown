#### 2019.3.17  周日

在写Controller模块，遇到了一个问题，那就是User表中的Id是自增的，我在犹豫是否要在参数中加入Id，查了资料感觉没什么用。于是就直接用postman试了一下，发现不加id也是可以的。会由hibernate自动生成的表 hibernate_sequence 中的值决定下一个id是多少，

<img src="./img/3.png">

如上图中下一个id的值是6，就是这样。如果表中已经有值，id和next_val冲突就会报错，因为primary_key只能有一个值不能重复。

关于Hibernate的自增主键管理，这个项目只有两个自增主键。可是它们并不是分别自增，而是共享一个值，那个值就是之前图中的next_val，即使修改了三行next_val中的另外两行也是如此。

<img src="./img/7.png"><img src="./img/6.png">

不过这不是什么大问题，只是有点奇怪罢了。之后有时间再琢磨吧。

#### 还有关于Cookie和Session的问题：

我想搞清楚这个的原理还是很重要的。下面一段参考自[Session原理](https://www.jianshu.com/p/2b7c10291aad)

##### 无状态的 HTTP 协议

还记得每当入门一门 Web 端语言的进行服务器端开发的时候，仅次于「Hello World」的 demo 就是「登录功能」了。实现登录功能很简单，验证客户端发送过来的账户和密码，如果通过验证就把用户塞进 session 中，然后在后续的访问中，只需检测 session 是否有这个用户就能知道用户是否登录了。Session 的中文翻译为：「会话」，只属于某一个客户端和某一个服务器端沟通的工具。但，计算机网络老师又说了，HTTP 协议是无状态的，怎么能记录用户的登录状态呢？
 鉴于 HTTP 是无状态协议，之前已认证成功的用户状态是无法通过协议层面保存下来的，既，无法实现状态管理，因此即使当该用户下一次继续访问，也无法区分他和其他的用户。于是我们会使用 Cookie 来管理 Session，以弥补 HTTP 协议中不存在的状态管理功能。

##### 利用 Cookie 管理 Session

<img src="./img/4.png">

而且关于Cookie和Session ，SpringBoot会有专门的模块处理的，后面具体的操作就不赘述了。



---

#### 2019-3.18

本来打算前两天就结束这个后台的0.2版本，可是开发过程并没有想象中的那么顺利。今天又是遇到了新的东西，就是接口文档，接口文档实际上并不好写，要把之前存在于想象中的数据格式具体化到json中，实际上是要花一点时间的，而且还要各种微调。以及把数据库中的一个多值依赖的表分成了两个，这样前面有工作没做完，又有新的东西加进来感觉整个人都有点混乱，所以在犹豫是否要熬个夜，把工作赶掉，明天去华科参加京东的实习招聘——去的话，回来就要打的。

开始正经的记笔记啦！

用postman测试接口的时候发现关于**删除数据的操作需要加`@Transactional`注解**，不然会报错。

**2019.3.20** 两天之后我查了下文档：**默认情况下JPA的每个操作都是事务的，在默认情况下，JPA的事务会设置为只读**，具体可以参考SimpleJpaRepository。**只有声明了@Transactional，本质上是声明了@Transactional(readOnly=false)，这样覆盖了默认的@Transactional配置便可以执行修改操作了**。提供事务支持，如隔离性等事务特性。下面是SimpleJpaRepository的开头部分源码，整个类都是标注了  readOnly=true的，

```java
@Repository
@Transactional(readOnly = true)
public class SimpleJpaRepository<T, ID> implements JpaRepositoryImplementation<T, ID> {
	....
}
```



写到ReadController时，想到需要有人写书，不过在手机上不好写，想着还是给出网页版的链接地址，到电脑上写吧。

总结：今天的工作完成了大约一半左右，难受，明天继续努力。



---

#### 2019.3.19

好了明天到了(:-) ，还是先记录一下昨天写SpringBoot的感受吧。真的是太强大了，关于CrudRepository，真的不用自己写逻辑就可以自定义按照某个字段查找返回的结果也不限定于单一的记录，也可以是一个List。完全靠自己定义，如下：

```java
public interface BookRepository extends CrudRepository<Book,Integer> {
  Book findById(int id);
  List<Book> findByAuthor(String author); //找到对应作者的所有书
  Boolean exsitsByAuthor(String author); //查找该作者是否在表中
}

```

还有就是Navicat真实比MySQL-WorkBench简单太多了，postman也很好用。生活在互联网工具高度发达的时代真爽。



今天遇到的问题：可能是改版后的**表中有like字段和关键字 like 冲突了**，所以insert时出错了，还是要提醒自己，命名要谨慎。



下午：遇到了**很麻烦的问题**，找了资料上面的解决方式都没用，所以后面我换了参数才解决。

Could not find acceptable representation  讲的是前端传来的数据与后端Content-Type的要求不一致，可是在项目中两者是一致的呀。还有说是命名重复导致，我还没涉及到js文件呢。

<img src="./img/8.png">

<img src="./img/9.png">



我先将其变为 get ，看看返回一个pojo是否可以。发现还是不行：`No converter found for return value of type` ，然后查了一下，pojo要先序列化才能用于传输，所以面向CSDN编程了下：查到如下资料

仅仅调用**ObjectMapper**  来实现，我们现在举个例子，可以创建一个POJO对象来与JSON相对应，jackson默认只能序列化 public 的字段，所以下面的例子中 name和 id都是public的。

```java

@Autowired
private ObjectMapper mapper;	
 
@GetMapping("/serialization.json")
public @ResponseBody String dataBind() throws IOException{
	User user = new User();
	user.setName("scg");
	user.setId((long) 18);
	String jsonStr = mapper.writeValueAsString(user);
	return jsonStr;
}

```

将参数改成`Map<String,String> ` 就可以运行了，这个问题后续还要继续Google。

```java
@RequestMapping(value = "/mypage", method = RequestMethod.POST, produces = MediaType.APPLICATION_JSON_UTF8_VALUE)
public String getInformation(@RequestBody Map<String,String> userid) {
  // 参数是 Map<String,Integer> 好像不行，因为会报这个错误 Could not find acceptable representation，然后参考了
  return myPageServiceImpl.myPage(Integer.parseInt(userid.get("userid")));
}
```

后面才发现，如果需要整数 需要配套的是` MediaType.TEXT_PLAIN_VALUE` ,如下：

```java
@RequestMapping(value = "/deletebook", method = RequestMethod.POST, produces = MediaType.TEXT_PLAIN_VALUE)
public String deleteBook(@RequestBody Map<String,Integer> id_map) {
  int success = writeServiceImpl.deleteBook(id_map.get("id")); 
  if (success == 1) {
    return "删除成功";
  }
  return "没有这本书";
}
```



**总结一下上面的问题：关于content-type是json还是text/plain 的问题：据我现在的理解和对接口的测试，发现如下**： 

```json
{
    "username":"lin",
    "password":"32fjkl" //像这样格式的数据 json和 text/plain都是一样可行的
}
---
{
    "id":2  //有包含整数的，只能是 text/plain
}

---
 有明确json格式的数据  就必须是  json的
{
    "chapterid""{
    	"bookid":2,
    	"chaptername":"章节名称"
	},
	"content":"章节内容"
}


```

下面是一篇关于content-type的文章：[content-type](http://homeway.me/2015/07/19/understand-http-about-content-type/)

**Content-Type**是实体头域（或称为实体头部，entity header）用于向接收方指示实体（entity body）的介质类型的，或称为资源的MIME类型，现在通常称media type更为合适。

 这里简单介绍一下我认为重要的内容：**关于post的发包方式**——

1. `application/x-www-form-urlencoded` 是常用的表单发包方式，普通表单提交、或者js发包默认都是通过这种方式，使用`enctype`来设置

```html
<form enctype="application/x-www-form-urlencoded" action="目标网址" method="POST">
    <input type="text" name="name" value="homeway">
    <input type="text" name="key" value="nokey">
    <input type="submit" value="submit">
</form>
```

服务器收到的 raw header类似：

```html
Accept:text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8
Accept-Encoding:gzip, deflate
Accept-Language:zh-CN,zh;q=0.8,en;q=0.6,zh-TW;q=0.4,gl;q=0.2,de;q=0.2
Cache-Control:no-cache
Connection:keep-alive
Content-Length:17
Content-Type:application/x-www-form-urlencoded
```

row body : `name=homeway&key=nokey`  就是上面的数据。

2. `multipart/form-data` :用于发送文件的Post包

假设用python发送一个文件给服务器：

```python
data = {
    "key1": "123",
    "key2": "456",
}
files = {'file': open('index.py', 'rb')}
res = requests.post(url="http://localhost/upload", method="POST", data=data, files=files)
print res
```



服务器收到的数据内容如下：

```
POST http://www.homeway.me HTTP/1.1
Content-Type:multipart/form-data; boundary=------WebKitFormBoundaryOGkWPJsSaJCPWjZP

------WebKitFormBoundaryOGkWPJsSaJCPWjZP
Content-Disposition: form-data; name="key2"
456
------WebKitFormBoundaryOGkWPJsSaJCPWjZP
Content-Disposition: form-data; name="key1"
123
------WebKitFormBoundaryOGkWPJsSaJCPWjZP
Content-Disposition: form-data; name="file"; filename="index.py"
```

当文件太长，HTTP无法在一个包之内发送完毕，就需要分割数据，分割成一个一个chunk发送给服务端，

那么`--`用于区分数据快，而后面的数据`633e61ebf351484f9124d63ce76d8469`就是标示区分包作用

---

#### 说一说我现在对SpringBoot的认识吧：

真的超级简单强大，简单是几乎不用任何配置文件就能够构建一个小的站点后台，就像我这个项目一样，只要前期工作做得好，后期编码连带google一些bug的时间也总共不到5天。

强大：之前是跟着书本上学习的SpringBoot技术，当时只是知道有这么个东西，时隔几个月(我是2018.10月份左右接触大概1月份之后就没碰了)当时的技术细节早就忘干净了。当我开始正式编码时，还是很忐忑的，基本上都是靠着csdn等博客网站的技术支持才没放弃（感谢这个高度发达的互联网）。

整个小项目下来，我发现spring的核心IoC是这样的：将提供各个服务的类标注为 component (相当于将其注册到BeanFactory中)，当需要时只要使用`@Autowired` 注解就可以从BeanFactory中获得该类的实例，不需要我们自己new它，管理它的依赖关系。

特别的强大，不过SpringBoot还是不推荐使用`@Component` 因为这样分类不明确，`@Service @Repository @Controller @Entity  `是更具体的分类，顾名思义，Service主要是逻辑代码，Repository主要是Dao接口连接Entity (关联数据库的实体类) ,Controller 是负责与前端交互数据的模块。Component在你并不清楚该类属于什么模块时使用

```java
public interface superA{
    
}

@Component
public class A implements superA{
    
}

public class B{
    @Autowired
    private superA a; //获得A的实例对象  ,也不一定要通过接口  A a也是可以的
}
```

还有就是 JPA的强大，CrudRepository可以拓展各种方法，**并不需要我们实现**，只需要通过字段名和单词就能知道该方法的作用。

```java
package com.example.rbooks.backend.entity;

import java.util.List;
import org.springframework.data.repository.CrudRepository;

public interface BookRepository extends CrudRepository<Book,Integer> {
  Book findById(int id);  //通过id找到Book
  List<Book> findByAuthor(String author); //找到对应author的所有书
  void deleteById(int id); //删除该id的book
  Book findByNameAndAuthor(String name,String author); //这个方法主要是找到新建书 的 id
  Boolean existsById(int id); //该id存在于表中吗？
  ...
  //非常多，完全是自己拓展的。之前看书的时候可没有想到这么好用
}

```

刚才在chapter中加了一个字段 datetime,发现只需要在entity模块中对应的类中加上去并生成getter和setter就可以了，根本不需要修改其他东西。这种易拓展和健壮性简直牛逼啊。



##### 缺点就是：或者说是面向对象的缺点就是好的代码结构中各种类和接口太多了，本来只需要一半的代码就可以搞定，但是愣是要多写接口，多写几个类来明确层次结构，减少耦合。对程序员的要求比较高。还好不用管理复杂的依赖关系，不然就gg了。



##### 2019.5.20  时隔好久，项目后期出现的都是一些小bug，就没有记录。

不过在最新版本中，增加了鉴权模块，出现了一连串的bug：通用方案如下

1.使用enum来标注三个权限

```java
public enum IdentityEnums {
  VISITOR,  //整数值0
  ADMIN,  //1
  SUPER_ADMIN //2
}
```

2.然后自定义一个权限注解

```java
@Target({ElementType.TYPE, ElementType.METHOD}) //意味着这个注解的适用对象 类，方法
@Documented
@Retention(RetentionPolicy.RUNTIME) //注解的生命周期在运行时依然有效，此时可以拿反射拿到注解的信息
public @interface Authorization {

  IdentityEnums[] value(); //使用刚才定义的enum

}
```

3.在需要权限的方法或者类上 注解`@Authorization` 

4.**设置拦截器，对部分请求进行权限检验**

```java
public class AuthInterceptor implements HandlerInterceptor {

  @Override
  public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler)
      throws Exception {
    Cookie cookies[] = request.getCookies();
    //然后对cookie进行剥离，获得我们需要的，再对它的值进行检查
    //用role来表示cookie中的权限
      
    //handler 是被访问的某个Controller方法的抽象，它是对象
    if (handler instanceof HandlerMethod) {
		//获取被Controller中被访问的方法
      Method method = ((HandlerMethod) handler).getMethod();
        //获取 该方法所在的是哪个Controller类
      Class<?> clazz = method.getDeclaringClass();
	  //获取在类上的Authorization注解
      Authorization authClass = clazz.getAnnotation(Authorization.class);
       //利用 handler 可以直接获取方法上的注解
      Authorization authMethod = ((HandlerMethod) handler)
          .getMethodAnnotation(Authorization.class);
//方法上的注解粒度更小，优先级更高，所以在authMethod==null的情况下，才使用authClass
      Authorization auth = authMethod == null ? authClass : authMethod;

      if (auth == null) {
        return true; //没有鉴权注解，表示该页面不需要权限
      }

      for (int i = 0; i < auth.value().length; i++) {
        //如果鉴权注解中包含该用户的权限
        if (auth.value()[i].ordinal() == role) {
          return true;
        }
      }
    }
    response.sendRedirect(request.getContextPath() + "/error");
    return false;
  }

  @Override
  public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler,
      ModelAndView modelAndView) throws Exception {

  }

  @Override
  public void afterCompletion(HttpServletRequest request, HttpServletResponse response,
      Object handler, Exception ex) throws Exception {

  }
}

```

但是在设置完拦截器之后，发现之前设置的跨域配置失效。

浏览器发送真正请求之前会先发送一个OPTIONS的预检请求(Preflighted requests)，这个请求是用来验证本次请求是否安全的。而该预检请求会被拦截器拦截，后续真正的请求也不会发送。cors实现跨域就是在http的response里添加适当的header来实现的。

我们知道http请求是走filter，到达Servlet之后才进行拦截器处理。所以如果把跨域配置放在filter中就可以生效。但是具体的细节还是要注意，前端要设置http请求带上cookie，而axios是默认不发送cookie的，所以很多请求就被拦截下来了，也没有报错，但是前端就是获取不到信息。所以需要在axios中配置，代码如下：

```js
const service = axios.create({
      withCredentials: true,
      timeout: 5000
    }
);
service.post(...);
//还可以设置拦截器      
             
// request拦截器
service.interceptors.request.use(
  config => {
    // 发送请求之前，要做的业务
    return config
  },
  error => {
    // 错误处理代码
    
    return Promise.reject(error)
  }
)

// response拦截器
service.interceptors.response.use(
  response => {
    // 数据响应之后，要做的业务
    return response
  },
  error => {
    return Promise.reject(error)
  }
)
```

后端关于 鉴权和跨域代码如下：

```java
package com.example.rbooks.backend;

@Configuration
public class WebConfig implements WebMvcConfigurer {

// 使用过滤器 跨域，先于拦截器触发
  @Bean
  public CorsFilter corsFilter() {
    //1. 添加 CORS配置信息
    CorsConfiguration config = new CorsConfiguration();
    //指定原始域
    config.addAllowedOrigin("*");
    //是否发送 Cookie
    config.setAllowCredentials(true);
    //放行哪些请求方式
    config.addAllowedMethod("*");
    //放行哪些原始请求头部信息
    config.addAllowedHeader("*");
    config.setMaxAge(3600L);
    //2. 添加映射路径
    UrlBasedCorsConfigurationSource corsConfigurationSource = new UrlBasedCorsConfigurationSource();
    corsConfigurationSource.registerCorsConfiguration("/**", config);
    //3. 返回新的CorsFilter
    return new CorsFilter(corsConfigurationSource);
  }


  // 配置鉴权 拦截器
 @Autowired
 private AuthInterceptor authInterceptor;

  @Override
  public void addInterceptors(InterceptorRegistry registry) {

    // 再对鉴权拦截器做配置
    InterceptorRegistration registration = registry.addInterceptor(authInterceptor);

    //排除 掉一些不需要鉴权的页面和资源
    registration.excludePathPatterns("/user/login");
    registration.excludePathPatterns("/user/register");
    registration.excludePathPatterns("/home/getnew");
    registration.excludePathPatterns("/home/gethot");
    registration.excludePathPatterns("/home/getall");
    registration.excludePathPatterns("/home/getsearch");

    registration.addPathPatterns("/**"); //再将所有都添加路劲添加进去

  }
}
```



搞定。

---

##### 7.6 在实习开始前无聊到改之前项目的东西

之前的注册就是只需要用户名和密码，现在想要改成传输一组包含两个数据库表的数据组。所以前端需要使用的axios如下：因为axios默认是`application/json`类型

```js
const config={ //axios的配置
  headers:{
    "Content-Type":"application/x-www-form-urlencoded"
  }
};

axios.post(`${baseURL}/user/register`,data,config);
```

后台这时就不能继续使用 `@RequestBody `获取数据了，应该换成`@RequestParam Map<String,String> body` ，不然会报错`Content-Type application/x-www-form-urlencoded;charset=utf-8 not surported` 的错误。

之后依然还是出现了一个bug，前端传输过去的数据都在 body 的key中，如下图：

<img src="./img/42.png">

所以我专门写了一个方法来处理注册信息：

```java
public int analyseData(Map<String, String> body) {

    List<String> data = new ArrayList<>();

    body.forEach(
        (k, v) -> {
          String dataArray[] = k.toString().split(","); // 先是用 ， 隔开各个数据组
          for (String s : dataArray) {
            data.add(s.split("\"")[3]); //然后提取出信息
          }
        });

    userServiceImpl.register(data.get(0), data.get(1)); //将用户名和密码存到user表中

    User user = userServiceImpl.getUserByName(data.get(0)); //先获取刚才存到user中的记录的id，然后根据data构造information保存到information表
    Information information = new Information();
    information.setUserid(user.getId());
    information.setUsername(data.get(0));
    information.setEmail(data.get(3));
    information.setGithubpage(data.get(4));
    information.setHomepage(data.get(5));
    information.setSelfintroduction(data.get(6));
    information.setPhotourl(data.get(7).split("}")[0]); // 因为最后一个字符串 还含有一个大括号}

    settingsService.update(information);

    return user.getId();
  }
```

最后顺利解决了。





```js
import axios from 'axios';

const service = axios.create({
      withCredentials: true,  // 因为axios默认不发送cookie，所以增加一个配置让它发送cookie，用于后台鉴权
      timeout: 5000
    }
);

export default service;

//也可以 直接
axios.defaults.withCredentials=true;
```

























